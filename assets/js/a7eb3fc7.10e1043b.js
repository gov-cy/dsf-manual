"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[928],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,d=u["".concat(l,".").concat(m)]||u[m]||g[m]||a;return t?i.createElement(d,o(o({ref:n},p),{},{components:t})):i.createElement(d,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4613:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],s={sidebar_position:3,slug:"/govcy-design-system/versioning-policy"},l="Versioning Policy",c={unversionedId:"Govcy Design System/versioning-policy",id:"Govcy Design System/versioning-policy",title:"Versioning Policy",description:"This document describes how to handle versioning on the GovCy Design System project (https://github.com/gov-cy/dsf-design-system).",source:"@site/src/docs/Govcy Design System/versioning-policy.md",sourceDirName:"Govcy Design System",slug:"/govcy-design-system/versioning-policy",permalink:"/dsf-manual/govcy-design-system/versioning-policy",editUrl:"https://github.com/gov-cy/dsf-manual/tree/main/src/docs/Govcy Design System/versioning-policy.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"/govcy-design-system/versioning-policy"},sidebar:"tutorialSidebar",previous:{title:"CSS Utilities",permalink:"/dsf-manual/govcy-design-system/css-utilities"},next:{title:"Kubernetes",permalink:"/dsf-manual/kubernetes"}},p=[{value:"Versioning Specification",id:"versioning-specification",children:[{value:"Versioning Examples",id:"versioning-examples",children:[],level:3}],level:2},{value:"When to assign new version number",id:"when-to-assign-new-version-number",children:[],level:2},{value:"Versioning Processes",id:"versioning-processes",children:[{value:"1. Change Version",id:"1-change-version",children:[],level:3},{value:"2. Change log",id:"2-change-log",children:[],level:3},{value:"3. Tagging and Publishing",id:"3-tagging-and-publishing",children:[],level:3},{value:"4. Inform",id:"4-inform",children:[],level:3}],level:2}],g={toc:p};function u(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"versioning-policy"},"Versioning Policy"),(0,a.kt)("p",null,"This document describes how to handle versioning on the GovCy Design System project (",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gov-cy/dsf-design-system"},"https://github.com/gov-cy/dsf-design-system"),")."),(0,a.kt)("p",null,"The purpose of the versioning policy is counter the effects of the \u201cdependency hell\u201d. As we release new components, update old components or correct bugs, care must be taken to make sure the changes do not affect developers that already use our product and that they are not locked in specific versions with no way to upgrade. "),(0,a.kt)("p",null,"By applying simple rules, requirements to dictate how version numbers are assigned or incremented and processes on specific actions we can tackle the dependency hell phenomenon. These rules are based on but not necessarily limited to pre-existing widespread common practices in use in both closed and open-source software and are based on the Semantic Versioning system ",(0,a.kt)("a",{parentName:"p",href:"https://semver.org/"},"https://semver.org/"),". "),(0,a.kt)("h2",{id:"versioning-specification"},"Versioning Specification"),(0,a.kt)("p",null,"Consider a version format of ",(0,a.kt)("strong",{parentName:"p"},"X.Y.Z")," (Major.Minor.Patch). "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Given a version number MAJOR.MINOR.PATCH, increment the:\n\n- MAJOR version when you make incompatible changes that require developers to change their code,\n- MINOR version when you add functionality in a backwards compatible manner, and\n- PATCH version when you make backwards compatible bug fixes.\n")),(0,a.kt)("p",null,"Read more on the versioning specification at ",(0,a.kt)("a",{parentName:"p",href:"https://semver.org/#semantic-versioning-specification-semver"},"https://semver.org/#semantic-versioning-specification-semver"),"."),(0,a.kt)("h3",{id:"versioning-examples"},"Versioning Examples"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"0.0.1 "),(0,a.kt)("li",{parentName:"ul"},"0.0.2"),(0,a.kt)("li",{parentName:"ul"},"0.1.1"),(0,a.kt)("li",{parentName:"ul"},"0.2.1"),(0,a.kt)("li",{parentName:"ul"},"0.3.0 0.x.x_latest"),(0,a.kt)("li",{parentName:"ul"},"1.0.0 "),(0,a.kt)("li",{parentName:"ul"},"1.0.1 "),(0,a.kt)("li",{parentName:"ul"},"1.0.2 1.x.x_latest"),(0,a.kt)("li",{parentName:"ul"},"2.0.0"),(0,a.kt)("li",{parentName:"ul"},"2.1.0"),(0,a.kt)("li",{parentName:"ul"},"2.2.0"),(0,a.kt)("li",{parentName:"ul"},"2.2.1"),(0,a.kt)("li",{parentName:"ul"},"2.2.2"),(0,a.kt)("li",{parentName:"ul"},"2.2.3"),(0,a.kt)("li",{parentName:"ul"},"2.2.4 2.x.x_latest")),(0,a.kt)("h2",{id:"when-to-assign-new-version-number"},"When to assign new version number"),(0,a.kt)("p",null,"A new version number should be assigned on each merge to the main branch and there is a change in the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," folder."),(0,a.kt)("h2",{id:"versioning-processes"},"Versioning Processes"),(0,a.kt)("p",null,"Do the following whenever a new version is assigned:"),(0,a.kt)("h3",{id:"1-change-version"},"1. Change Version"),(0,a.kt)("p",null," Change the version number in the ",(0,a.kt)("strong",{parentName:"p"},"package.json")," file as shown in the sample below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "govcy-design-system",\n    "version": "0.0.1",\n    .....\n')),(0,a.kt)("h3",{id:"2-change-log"},"2. Change log"),(0,a.kt)("p",null,"Update the ",(0,a.kt)("strong",{parentName:"p"},"changelog.md")),(0,a.kt)("p",null,"When updating the change log, make it easier for developers and contributors to see precisely what notable changes have been made between each release (or version) of the project. Remember the change log is intended for humans :-). "),(0,a.kt)("p",null,"Use the format is based on ",(0,a.kt)("a",{parentName:"p",href:"https://keepachangelog.com/en/1.0.0/"},"Keep a Changelog")),(0,a.kt)("p",null,"Sample changelog.md"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markdown"},"# Changelog\n \nAll notable changes to this project will be documented in this file.\n \nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n \n## [v0.2.3] - 2022-02-22\n \n### Removed\n- auto-changelog package\n \n## [v0.2.2] - 2022-02-22\n \n### Added\n- auto-changelog package\n \n### Changed\n- Update changelog\n \n## [v0.2.0] - 2022-02-22\n \n### Changed\n- Initial commit after applying Semantic Versioning\n")),(0,a.kt)("h3",{id:"3-tagging-and-publishing"},"3. Tagging and Publishing"),(0,a.kt)("p",null,"A github action will  ",(0,a.kt)("inlineCode",{parentName:"p"},"Tagging")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Publishing"),"\nIf the following conditions are met the ",(0,a.kt)("inlineCode",{parentName:"p"},"Tag and Publish on Version Change")," action will be triggered on Github:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"There is a change on ",(0,a.kt)("strong",{parentName:"li"},"package.json")," file ",(0,a.kt)("inlineCode",{parentName:"li"},"version")," attribute (as described on step 1)."),(0,a.kt)("li",{parentName:"ul"},"There is a change in the ",(0,a.kt)("strong",{parentName:"li"},"dist")," folder")),(0,a.kt)("p",null,"The action will then do the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Makes ",(0,a.kt)("strong",{parentName:"li"},"tags")," on Git (support latest major version) for ",(0,a.kt)("strong",{parentName:"li"},"latest")," and ",(0,a.kt)("strong",{parentName:"li"},"X.X.X"),"\nThis would be the equivalent of running the following from the ",(0,a.kt)("inlineCode",{parentName:"li"},"master"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git pull\ngit tag v0.2.3\ngit push origin --tags\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Publishes")," the new versions on the CDN server for ",(0,a.kt)("strong",{parentName:"li"},"latest")," and ",(0,a.kt)("strong",{parentName:"li"},"X.X.X")," in the following URLs:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"https://govcydesignsystem1.azureedge.net/bvtest/version/X.X.X/style.min.css")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"https://govcydesignsystem1.azureedge.net/bvtest/version/latest/style.min.css"))))),(0,a.kt)("h3",{id:"4-inform"},"4. Inform"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Inform")," developers and collaborators about the new version. . "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Keep a list of developers so that they can be informed via a newsletter about the new version.\nSuggest that it is strongly suggested that they use the latest Major version and always do visual tests."),(0,a.kt)("li",{parentName:"ul"},"Announce the new version in the ",(0,a.kt)("inlineCode",{parentName:"li"},"daily stand-up")," and in the ",(0,a.kt)("inlineCode",{parentName:"li"},"tech-talk")," channel in discord.")))}u.isMDXComponent=!0}}]);